---
title: "RAP_Download"
author: "Mike Proctor"
format: 
  html: default
editor: visual
---

[Rangeland Analysis Platform](https://rangelands.app/)

## Load libraries and set up folder paths

```{r}
#| label: setup
suppressWarnings({  # Just so we don't get a bunch of unnecessary messages on render
suppressPackageStartupMessages(library(tidyverse)) 
suppressMessages(library(rprojroot))
suppressMessages(library(sf))
suppressMessages(library(terra))
suppressMessages(library(tidyterra))
})

## Local stuff  =================
base_path       <- find_rstudio_root_file()                     
source_path     <- file.path(base_path, "source_data//")          
dat_path        <- file.path(base_path, "dat_output//")            
plot_path       <- file.path(base_path, "plots//")                 
csv_path        <- file.path(base_path, "csv_output//")
```

## Install and load the [rapr](https://humus.rocks/rapr/reference/get_rap.html) package

```{r rapr}
#| label: rapr

#remotes::install_github("brownag/rapr")
library(rapr)

```

Make sure there is a "source_data" folder within this project - where ever you saved it locally. The following line will create one in the correct location.

```{r folder}
ifelse(!dir.exists("source_data"), dir.create("source_data"), "Folder exists already")
```

## Download Fire Perimeter [dataset](https://data-nifc.opendata.arcgis.com/datasets/5b3ff19978be49208d41a9d9a461ecfb/about) from NIFC

Save this in the "source_data" folder created above.

## 

```{r}
#| label: perimeter
#| include: false

# There's only one layer so we don't have to specify any for st_read
st_layers(paste0(source_path, "Historic_Geomac_Perimeters_Combined_2000_2018_-7007592357689317076.gpkg"))

Fires <- st_read(paste0(source_path, "Historic_Geomac_Perimeters_Combined_2000_2018_-7007592357689317076.gpkg"))
```

## Filter data set for the Ferguson fire \@ WMNWR in 2011

[Firefighters Have Comanche County Wildfires Under Control](https://www.news9.com/story/5e35b03683eff40362bec4d4/firefighters-have-comanche-county-wildfires-under-control)

[Two construction companies fined for Wichita Mountains fire](https://www.oklahoman.com/story/business/local/2016/07/30/two-construction-companies-fined-for-wichita-mountains-fire/60660143007/)

[Performance of Burn-Severity Metrics and Classification in Oak Woodlands and Grasslands](https://www.researchgate.net/publication/281408533_Performance_of_Burn-Severity_Metrics_and_Classification_in_Oak_Woodlands_and_Grasslands)

```{r}
Ferguson <- Fires |> filter(incidentname == "Ferguson" & state == "OK")

Ferguson <- sf::st_transform(Ferguson, crs = 4326) # Set crs so it lines up with RAP
#st_crs(Ferguson)

```

# Download RAP data

The get_rap() function calculates the extent of the polygon (Ferguson) and uses that as an AOI.

Plot the rap layers along with the Ferguson perimeter to make sure they land right - no crs issues. Downloads all of the cover layers but filters to only the tree cover layers

```{r GetRap}
#| echo: false

# Turn this off after running the first time so you don't spam the server
# res <- get_rap(
#   Ferguson, # creates a bounding box of this polygon - you can specify a bounding box - see docs
#   version = "v3",
#   years = c(2010:2012),
# #  filename = "RAP.tif",
#   product = "vegetation-cover", # other option here is "vegetation-biomass"
#   progress = TRUE
# )

#st_crs(res) # check crs 


#Layers <- names(res)# This gets the name of the indexed layer https://rspatial.github.io/terra/reference/as.list.html
Layers <- as.data.frame(names(res)) |> filter(str_detect(names(res), "^tree")) # only interested in the tree layers

for (i in Layers) {
  
  #This loops through all of the layers 
  spatter <- res |> tidyterra::select(all_of(i))# https://dieghernan.github.io/tidyterra/index.html

    # Parse out parts of layer names 
  category <- str_extract(i, "[a-z]+")
  stat <- str_extract(i, "[a-z]+_[0-9]+_[a-z][0-9]+$") |> str_extract("[a-z]+")
  layerdate <- str_extract(i, "[0-9]+") |> str_remove("_")
  
  #plotTitle <- toupper(paste0(category, "_", stat, "_", layerdate))
  
  #print(plotTitle)
  
  
    plot_name <- 
  ggplot() +
  tidyterra::geom_spatraster(data = spatter) +
  geom_sf(data = Ferguson, color = "green", fill = "transparent") +
  theme(legend.position = "none",
        axis.title.x = element_blank(),
        axis.text.x  = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.y  = element_blank(),
        axis.ticks.y = element_blank()) +
  ggtitle("2011 Ferguson Fire Perimeter") +
      facet_wrap(~lyr)

print(plot_name)
  
  
}

  
```

# Buffer the perimeter

Used -100m to avoid edge effects from roads, firebreaks etc. If I were working with movement data(GPS collars) of animals, I'd probably use a positive number and consider movement range or territory size to sort out what value to use. If the buffer is larger than the original polygon, use it in the first argument in get_rap() instead of the original. In reality -100m is probably too much but it makes it easier to see the buffer when plotting at this scale. The red line is the original Ferguson perimeter, the tan is the buffered perimeter, and the green is the difference between the two - what we buffered out.

```{r}
#| label: buffer
#| echo: false

# set crs back to WGS84/UTM zone 14 - makes the math work better
Ferguson <- sf::st_transform(Ferguson, crs = 32614) 

Ferguson_buffered_100 <- Ferguson |> sf::st_buffer(dist = -100)
#st_crs(Ferguson)


plot_name<- 
  ggplot() +
  geom_sf(data = Ferguson, col = "red",  fill = "green") +
  geom_sf(data = Ferguson_buffered_100, color = "white", fill = "tan") +
  theme(legend.position = "none",
        axis.title.x    = element_blank(),
        axis.text.x     = element_blank(),
        axis.ticks.x    = element_blank(),
        axis.text.y     = element_blank(),
        axis.ticks.y    = element_blank()) +
  ggtitle("2011 Ferguson Fire Perimeter with -100m buffer")
    

print(plot_name)

```

# Mask RAP layers to buffer

```{r}
#| label: mask

reProSpatter <- project(spatter, "EPSG:32614") # Has to match the polygon were using for the mask
# st_crs(rapRaster)
# st_crs(Ferguson)

#names(reProSpatter)
layerList <- list()
for (k in names(reProSpatter)) {
  
rapRaster <- reProSpatter[[k]]

maskedRap <- mask(rapRaster[[k]]
     , Ferguson_buffered_100
     , inverse = FALSE
     , updatevalue = NA
     , touches = TRUE
    # , filename=paste0(plot_path, k, ".tif")
     )
df <- maskedRap

df_name <- paste(k)

assign(df_name, df, envir = .GlobalEnv) # Save individual layers to environment

layerList[[k]] <- df_name # Create a list of the layer names while we're at it

}
```


# Plot the masked layers

```{r}
#| label: Plot mask
for (z in layerList) {
  

plot_name <- 
  ggplot() +
  geom_spatraster(data = get(z)) +
  scale_fill_viridis_c( na.value = "transparent", limits = c(NA, 100)) +
  theme(#legend.position = "none",
        axis.title.x    = element_blank(),
        axis.text.x     = element_blank(),
        axis.ticks.x    = element_blank(),
        axis.text.y     = element_blank(),
        axis.ticks.y    = element_blank()) +
    labs(
    fill = "",
    title = paste0("Ferguson Fire 2011"),
    subtitle = k
  )
  
print(plot_name)  

}

```

# Create Histograms of the plots


```{r}
#| label: histogram

for (y in layerList) {
  
hist(get(y)
     ,plot = TRUE
     , xlim = c(0,100)
     , ylim = c(0,125000)
     , xlab = "Percent Cover")

}
```


# Calculate and plot focal means for each layer

```{r}
#| label: focal mean
focalities <- list()
for (n in layerList) {
  
  focalities[[n]] <- 
    focal(
      get(n),
      w = matrix(1, nrow = 3, ncol = 3),
      fun = mean,
      na.rm = FALSE)
  
  plot_name <- 
  ggplot() +
  geom_spatraster(data = get(n)) +
  scale_fill_viridis_c( na.value = "transparent", limits = c(NA, 100)) +
  theme(#legend.position = "none",
        axis.title.x    = element_blank(),
        axis.text.x     = element_blank(),
        axis.ticks.x    = element_blank(),
        axis.text.y     = element_blank(),
        axis.ticks.y    = element_blank()) +
    labs(
    fill = "",
    title = n,
    subtitle = "Focal Mean"
  )
  
print(plot_name)  
}

```


Create some random sites

```{r}
#| label: random

set.seed(67) # What happens if this isn't set or set to something different?
RandomSampleSites <- st_sample(Ferguson_buffered_100, size = 30, type = "random")

# Converts to an sf df and adds ID column
RandomSampleSites <- st_as_sf(RandomSampleSites) |> mutate("ID" = row_number())
  
  plot_name <- 
  ggplot() +
  geom_spatvector(data = Ferguson_buffered_100) +
  geom_spatvector_label(data = RandomSampleSites, aes(label = ID)) +
      theme(#legend.position = "none",
        axis.title.x    = element_blank(),
        axis.text.x     = element_blank(),
        axis.ticks.x    = element_blank(),
        axis.text.y     = element_blank(),
        axis.ticks.y    = element_blank()) +
    labs(
    fill = "",
    title = "RandomSampleSites",
    #subtitle = "Focal Mean"
  )
  
print(plot_name) 

```


Extract RAP based on sites
```{r}
#| label: Extract Rap

Focal_df <- list()
for (p in layerList) {


Focal_df[[p]] <- round(
  extract(
    get(p), 
    RandomSampleSites)
  ,2)

}


Focal_df <- bind_rows(Focal_df)

fred <- Focal_df |> pivot_longer(c(2:4), names_to = "Year", values_to = "Value", values_drop_na = TRUE)

#TODO 
Sort this out to plot -----------------------------------




```

